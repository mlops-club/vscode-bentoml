{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Bentofile",
  "description": "Schema for BentoML bentofile.yaml configuration",
  "type": "object",
  "properties": {
    "service": {
      "type": "string",
      "pattern": "^\\s*([A-z_]+\\.?)+[A-z_]+:\\s*([A-z_][A-z0-9_]*)\\s*$",
      "examples": ["path.to.service:MyService", "service:svc", "service:SVC"],
      "markdownDescription": "`service` (required) is a **required** field and points to where a [Service object](https://docs.bentoml.org/en/latest/guides/services.html) resides.  \n \nIt is often defined as `service: \"service:class-name\"`. \n \n- `service`: The Python module, namely the `service.py` file. \n- `class-name`: The class-based Service's name created in `service.py`, decorated with `@bentoml.service`. \n   \nIf you have multiple Services in `service.py`, you can specify the main Service receiving user requests in `bentofile.yaml`. \n \nOther Services will be started together with this main Service. \n \n[Documentation](https://docs.bentoml.org/en/latest/guides/build-options.html#service) \n"
    },
    "description": {
      "markdownDescription": "`description` (optional) allows you to annotate your Bento with relevant documentation, which can be written in plain text or [Markdown](https://daringfireball.net/projects/markdown/syntax) format. \n \nThe description appears in the Bento's OpenAPI UI and supports full markdown. \n \nYou can either directly provide the description in `bentofile.yaml` or reference an external file through a path. \n \n#### (Option 1) Inline \n \n```yaml \nservice: \"service:svc\" \ndescription: | \n    ## Description For My Bento 🍱 \n \n    Use **any markdown syntax** here! \n \n    > BentoML is awesome! \ninclude: \n    ... \n``` \n \n#### (Option 2) File path \n \n```yaml \nservice: \"service:svc\" \ndescription: \"file: ./README.md\" \ninclude: \n    ... \n``` \n \nFor descriptions sourced from an external file, you can use either an absolute or relative path.  \n \nMake sure the file exists at the specified path when the `bentoml build` command is run.  \n \nFor relative paths, the reference point is the `build_ctx`, which defaults to the directory from which `bentoml build` is executed. \n \n[Documentation](https://docs.bentoml.org/en/latest/guides/build-options.html#description)",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            }
          },
          "required": ["path"]
        }
      ]
    },
    "labels": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "markdownDescription": "`labels` (optional) are key-value pairs associated with objects.  \n \nIn BentoML, both Bentos and models can have labels attached to them. \n \nThese labels can serve various purposes, such as identifying or categorizing Bentos and models in BentoCloud.  \n \nYou can add or modify labels at any time. \n \n```yaml \nlabels: \n    owner: bentoml-team \n    stage: not-ready \n    build-number: \"14\" \n``` \n \n[Documentation](https://docs.bentoml.org/en/latest/guides/build-options.html#labels)"
    },
    "include": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Files to include in the Bento, supporting wildcard characters."
    },
    "exclude": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Files to exclude from the Bento, supports gitignore style patterns."
    },
    "python": {
      "$ref": "#/definitions/pythonOptions"
    },
    "envs": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": ["name", "value"]
      },
      "description": "Environment variables to inject into the Bento container."
    },
    "conda": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Custom conda channels to use."
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Custom conda dependencies."
        },
        "pip": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specific pip conda dependencies."
        },
        "environment_yml": {
          "type": "string",
          "description": "Path to a pre-existing conda environment.yml file."
        }
      }
    },
    "docker": {
      "$ref": "#/definitions/dockerOptions"
    }
  },
  "required": ["service"],
  "definitions": {
    "pythonOptions": {
      "type": "object",
      "properties": {
        "packages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requirements_txt": {
          "type": "string"
        },
        "lock_packages": {
          "type": "boolean"
        },
        "index_url": {
          "type": "string"
        },
        "no_index": {
          "type": "boolean"
        },
        "trusted_host": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "find_links": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "extra_index_url": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pip_args": {
          "type": "string"
        },
        "wheels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of paths to wheels to include in the Bento."
        }
      },
      "description": "Configuration for Python packages and environment."
    },
    "dockerOptions": {
      "type": "object",
      "properties": {
        "distro": {
          "type": "string"
        },
        "python_version": {
          "type": "string"
        },
        "cuda_version": {
          "type": "string"
        },
        "system_packages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "setup_script": {
          "type": "string"
        },
        "base_image": {
          "type": "string"
        },
        "dockerfile_template": {
          "type": "string"
        }
      },
      "description": "Configuration for Docker image generation."
    }
  }
}
